name: Poetry setup
description: Install a given version of Poetry using a given version of Python

inputs:
  python-version:
    default: "3"
    required: true
  poetry-setup:
    required: false
  poetry-home:
    default: "${{ github.workspace }}/.poetry"
    required: true
  cache:
    default: true
    type: boolean
    required: false

outputs:
  python-path:
    description: The path to the Python executable
    value: ${{ steps.python-setup.outputs.path }}
  python-version:
    description: The version of Python that was installed
    value: ${{ steps.python-setup.outputs.version }}
  poetry-setup:
    description: The version of Poetry that was installed
    value: ${{ steps.poetry-setup.outputs.version }}
  poetry-home:
    description: The home directory where Poetry was installed
    value: ${{ inputs.poetry-home }}

runs:
  using: "composite"

  steps:
    - name: Setup Python
      id: python-setup
      env:
        PYTHON_VERSION: ${{ inputs.python-version }}
      shell: bash
      run: |
        if [[ ! "$PYTHON_VERSION" =~ ^[0-9]+(\.[0-9]+)?$ ]]; then
          echo "Error: Invalid Python version format. Please use 'X' or 'X.Y'."
          exit 1
        fi

        # Exit 0 anyway to avoid bash pipefail issues
        PYTHON_PATH="$(command -v python${PYTHON_VERSION} 2>/dev/null || exit 0)"

        if [[ -z $PYTHON_PATH ]]; then
          echo "Error: Python version ${PYTHON_VERSION} is not installed."
          exit 1
        fi

        echo "Using Python @ ${PYTHON_PATH}"
        echo "path=${PYTHON_PATH}" >> $GITHUB_OUTPUT
        echo "version=${PYTHON_VERSION}" >> $GITHUB_OUTPUT

    - name: Setup Poetry
      id: poetry-setup
      env:
        POETRY_VERSION: ${{ inputs.poetry-setup }}
      shell: bash
      run: |
        if [[ -z "${POETRY_VERSION}" ]]; then
          POETRY_VERSION=$(
            curl -s https://pypi.org/pypi/poetry/json | \
            jq -r '.info.version' \
          )
          if [[ -z "${POETRY_VERSION}" ]]; then
            echo "Error: Unable to fetch the latest Poetry version."
            exit 1
          fi
        fi

        echo "Using Poetry version ${POETRY_VERSION}"
        echo "version=${POETRY_VERSION}" >> $GITHUB_OUTPUT

    - name: Cache Poetry
      id: cache
      if: ${{ inputs.cache == 'true' }}
      uses: actions/cache@v4
      with:
        path: ${{ inputs.poetry-home }}
        key: python${{ steps.python-setup.outputs.version }}-poetry${{ steps.poetry-setup.outputs.version }}
        restore-keys: |
          python${{ steps.python-setup.outputs.version }}-poetry${{ steps.poetry-setup.outputs.version }}

    - name: Install Poetry
      id: poetry-install
      if: ${{ steps.cache.outputs.cache-hit != 'true' }}
      env:
        POETRY_VERSION: ${{ steps.poetry-setup.outputs.version }}
        PYTHON_PATH: ${{ steps.python-setup.outputs.path }}
        POETRY_HOME: ${{ inputs.poetry-home }}
      shell: bash
      run: |
        curl -sSL https://install.python-poetry.org | ${PYTHON_PATH} - || {
          echo "Error: Poetry installation failed."
          exit 1
        }

    - name: Add Poetry to PATH
      id: poetry-path
      env:
        POETRY_HOME: ${{ inputs.poetry-home }}
      shell: bash
      run: |
        echo "${POETRY_HOME}/bin" >> $GITHUB_PATH
